{"version":3,"file":"bundle.js","sources":["../src/main.js"],"sourcesContent":["let canvas, gl;\r\nlet aVertices = [];\r\n\r\ndocument.body.onload = _ => {\r\n    canvas = document.querySelector('#canvas');\r\n    gl = canvas.getContext('webgl');\r\n\r\n    // Pipeline setup\r\n    gl.clearColor(.25, .35, .45, 1);\r\n    // Backface culling.\r\n    gl.frontFace(gl.CCW);\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.cullFace(gl.BACK); // or gl.FRONT\r\n\r\n    let vertices, colors, indices = undefined;\r\n    // Vertex data.\r\n    // Positions.\r\n    let nTriangleCount = 16;\r\n    vertices = createVertices(nTriangleCount);\r\n\r\n    // Colors as rgba.\r\n    colors = createColors(nTriangleCount);\r\n\r\n    // Index data.\r\n    let indices2 = new Uint16Array(Array.from(Array(vertices.length).keys()));\r\n\r\n    draw(gl.TRIANGLES, vertices, colors, indices2);\r\n};\r\n\r\nlet createColors = (nCount = 8) => {\r\n    let colors = [];\r\n    let c1, c2, c3, v = 1;\r\n\r\n    for (let i = 0; i < nCount*3; i += 1) {\r\n        c1 = Math.round(Math.random() * 1);\r\n        c2 = Math.round(Math.random() * 1);\r\n        c3 = Math.round(Math.random() * 1);\r\n        colors = [...colors, c1, c2, c3, v];\r\n    }\r\n\r\n    return new Float32Array(colors);\r\n}\r\n\r\nlet createVertices = (nCount = 8) => {\r\n    let vertices = [];\r\n    let triangleCount = nCount / 2;\r\n    let r = 1;\r\n    let g = Math.PI / triangleCount;\r\n\r\n    // 1. half\r\n    for (let i = 0; i < triangleCount; i += 1) {\r\n        r = Math.random() * .5 + .5;\r\n        let x1 = 0;\r\n        let y1 = 0;\r\n        let z1 = 0;\r\n\r\n        let x2 = r * Math.cos(g * i);\r\n        let y2 = r * Math.sin(g * i);\r\n        let z2 = 0;\r\n\r\n        let x3 = r * Math.cos(g * (i + 1));\r\n        let y3 = r * Math.sin(g * (i + 1));\r\n        let z3 = 0;\r\n\r\n        vertices = [...vertices, x1, y1, z1, x2, y2, z2, x3, y3, z3];\r\n    }\r\n\r\n    // 2. half\r\n    vertices.map(x => x * -1);\r\n    vertices = [...vertices, ...vertices.map(x => x * -1)];\r\n    return new Float32Array(vertices);\r\n}\r\n\r\nlet draw = (mode, aVertices, aColors, aIndices) => {\r\n\r\n    // Compile a vertex shader\r\n    let vsSource = '' +\r\n        'attribute vec3 pos;' +\r\n        'attribute vec4 col;' +\r\n        'varying vec4 color;' +\r\n        'void main(){' +\r\n        'color = col;' +\r\n        'gl_Position = vec4(pos, 1);' +\r\n        '}';\r\n    let vs = gl.createShader(gl.VERTEX_SHADER);\r\n    gl.shaderSource(vs, vsSource);\r\n    gl.compileShader(vs);\r\n\r\n    // Compile a fragment shader\r\n    let fsSouce = 'precision mediump float;' +\r\n        'varying vec4 color;' +\r\n        'void main() {' +\r\n        'gl_FragColor = color;' +\r\n        '}';\r\n    let fs = gl.createShader(gl.FRAGMENT_SHADER);\r\n    gl.shaderSource(fs, fsSouce);\r\n    gl.compileShader(fs);\r\n\r\n    // Link together into a program\r\n    let prog = gl.createProgram();\r\n    gl.attachShader(prog, vs);\r\n    gl.attachShader(prog, fs);\r\n    gl.linkProgram(prog);\r\n    gl.useProgram(prog);\r\n\r\n    // Setup position vertex buffer object.\r\n    var vboPos = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, vboPos);\r\n    gl.bufferData(gl.ARRAY_BUFFER, aVertices, gl.STATIC_DRAW);\r\n    // Bind vertex buffer to attribute variable.\r\n    var posAttrib = gl.getAttribLocation(prog, 'pos');\r\n    gl.vertexAttribPointer(posAttrib, 3, gl.FLOAT, false, 0, 0);\r\n    gl.enableVertexAttribArray(posAttrib);\r\n\r\n    // Setup color vertex buffer object.\r\n    var vboCol = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, vboCol);\r\n    gl.bufferData(gl.ARRAY_BUFFER, aColors, gl.STATIC_DRAW);\r\n    // Bind vertex buffer to attribute variable.\r\n    var colAttrib = gl.getAttribLocation(prog, 'col');\r\n    gl.vertexAttribPointer(colAttrib, 4, gl.FLOAT, false, 0, 0);\r\n    gl.enableVertexAttribArray(colAttrib);\r\n\r\n    // Setup index buffer object.\r\n    var ibo = gl.createBuffer();\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibo);\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, aIndices,\r\n        gl.STATIC_DRAW);\r\n    ibo.numerOfEmements = aIndices.length;\r\n\r\n    // Clear framebuffer and render primitives.\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    gl.drawElements(mode, ibo.numerOfEmements, gl.UNSIGNED_SHORT, 0);\r\n\r\n}"],"names":["canvas","gl","document","body","onload","_","vertices","colors","querySelector","getContext","clearColor","frontFace","CCW","enable","CULL_FACE","cullFace","BACK","createVertices","createColors","indices2","Uint16Array","Array","from","length","keys","draw","TRIANGLES","nCount","c1","c2","c3","i","Math","round","random","Float32Array","triangleCount","r","g","PI","x1","y1","z1","x2","cos","y2","sin","z2","x3","y3","z3","map","x","mode","aVertices","aColors","aIndices","vs","createShader","VERTEX_SHADER","shaderSource","compileShader","fs","FRAGMENT_SHADER","prog","createProgram","attachShader","linkProgram","useProgram","vboPos","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","posAttrib","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","vboCol","colAttrib","ibo","ELEMENT_ARRAY_BUFFER","numerOfEmements","clear","COLOR_BUFFER_BIT","drawElements","UNSIGNED_SHORT"],"mappings":"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"}